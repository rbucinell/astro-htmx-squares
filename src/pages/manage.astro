---
import DefaultLayout from "@layouts/DefaultLayout.astro";
import { GET as GetPicks } from '../pages/api/picks/index.ts';
import { GET as GetScores } from '../pages/api/scores/index.ts';
let picks = [];
const response = await GetPicks(Astro);
const data = await response.json();
picks = data.documents;
picks.sort( (a,b) => a.pick - b.pick );
let scores = [];
scores = (await (await GetScores(Astro)).json()).documents;
---
<DefaultLayout title="Manage">
    <main class="mx-auto max-w-screen-md">

        <div class="w-full flex flex-row">
            {[1,2,3,4].map( q =>{
                let score = scores?.find( s => s.quarter === q );
                return  <div class="w-1/4 border border-gray-500 border-b-4 pb-1 flex b-1 flex-col">
                            <form>
                                <div class="flex border border-black p-1 bg-gray-300 justify-center">{`Q${q}`}</div>
                                <div class:list={["grow bg-nfc-primary flex justify-evenly",`scores${q}`]}>
                                    <span>NFC</span>
                                    <input type="number" class="w-[40%] border rouneded-sm bg-nfc-primary border-black px-2" name="nfc" value={score?.nfc} />
                                </div>
                                <div class:list={["grow bg-afc-primary flex justify-evenly",`scores${q}`]}>
                                    <span>AFC</span>
                                    <input type="number" class="w-[40%] border rouneded-sm bg-afc-primary border-black px-2" name="afc" value={score?.afc} />
                                </div>
                                <button class="border border-blue-800 bg-blue-200 hover:bg-blue-600  rounded-md m-1 p-1"
                                    type="submit"
                                    hx-put={`api/scores/${q}`}
                                    hx-include="closest form"
                                    hx-target={`#none`}>Set Score
                                </button>
                            </form>
                        </div>
            })}
        </div>

        <ul class="m-1 mx-auto p-1">
            { picks.map( pick => {

                return <li id={pick.pick} class="border m-1 flex justify-between">
                    <div class="flex items-start p-1 gap-1">
                        <div class="border border-black p-1 px-2 bg-gray-300 ">{pick.pick}</div>
                        <div class="flex flex-col">
                            <div>{pick.display}</div>
                            <div>{pick.email}</div>
                        </div>
                    </div>
                    <div class="flex justify-end flex-grow gap-4 items-start p-1">
                        { (!pick.paid || pick.paid === 'false') &&
                            <button type="button"
                                hx-put={`api/picks/${pick.pick}?paid=true`}
                                hx-swap="outerHTML"
                                class ="px-3 border border-green-800 bg-green-200 hover:bg-green-600 rounded-md">
                                <span>$</span>
                            </button>
                        }
                        
                        <button type="button"
                            hx-confirm={`Are you sure you want to delete ${pick.pick}?`}
                            hx-target={`#${pick.pick}`}  
                            hx-swap="outerHTML" 
                            hx-delete={`api/picks/${pick.pick}`} 
                            class="px-3 border border-red-800 bg-red-200 hover:bg-red-600 rounded-md">X
                        </button>                    
                </div>
                </li>

            })}
        </ul>
    </main>
</DefaultLayout>