---
import '../styles/squares.css';
import PurchaseSquaresAddon from "@components/PurchaseSquaresAddon.astro";
import Square from "@components/Square.astro";
import {SquareState} from "@components/Square.astro";
import PurchaseModal from './PurchaseModal.astro';
import { Icon } from 'astro-icon/components';
import { getWinners } from 'src/lib/scores';

//https://logotyp.us/logo/nfl/


const CSS_COLOR_NAMES = ["Indigo", "DarkOrange", "AntiqueWhite", "Ivory", "DarkRed", "Aqua", "RoyalBlue", "DarkSalmon", "SaddleBrown", "LawnGreen", "Salmon", "MidnightBlue", "Black", "LightBlue", "SeaGreen", "DeepPink", "Silver", "DodgerBlue", "Olive", "FireBrick", "Orange", "OrangeRed", "Tan", "Crimson", "GhostWhite", "Gold", "Tomato", "DarkBlue", "Magenta", "Maroon", "MediumAquaMarine", "PeachPuff", "Wheat", "WhiteSmoke", "DarkKhaki", "Yellow", "PowderBlue", "MediumBlue", "PapayaWhip", "Gainsboro", "Lime", "Gray", "PaleVioletRed", "Teal", "Coral", "White", "Blue", "MistyRose", "Black"];
const ROWS = 'ABCDEFGHIJ'.split('');
const COLS = [...Array(10).keys()];
const Qs = [1,2,3,4];

let { price, picks, sequences, scores } = Astro.props;

let c = 0;
let colormap = new Map();
for( let pick of picks ){
  if( !colormap.has(pick.email) ){
    colormap.set(pick.email,CSS_COLOR_NAMES[ (c++) % CSS_COLOR_NAMES.length]);
  }
  pick.color = colormap.get(pick.email);
}

let winners = getWinners( scores, sequences );

for( let [i,winner] of winners.entries() ){
  if( winner ) {
    let pick = picks.find( p => p.pick === winner );
    if( pick ){
      pick.won = i+1;
    }
  }
}

---
<PurchaseSquaresAddon price={price} />
<div class="board-grid center text-center border border-solid border-gray-500 max-sm:border-l-afc-primary max-sm:border-l-2 max-sm max-sm:border-t-2 max-sm:border-t-nfc-primary"> 

  <div id="logo" class="bg-nfl-white border-0">
    <img class="h-full max-h-full max-w-full justify-center" src="img/nfl-shield.svg">
    
  </div>

  <!--Corners -->
  {Qs.map( q => <div class:list={["qFont",`q${q}`,"text-lg font-bold leading-normal text-left py-1"]} id={`chq${q}`}>Q{q}</div> )}
  
  <!-- NFC Headers -->
  <div id="champNFC" class="overflow-hidden flex justify-center bg-nfc-primary bg-center bg-no-repeat bg-cover border border-solid border-gray-500">
    <img class="w-full" src="img/nfc-logo.svg" />
  </div>
  {Qs.map( q => { 
    return <div class:list={["text-lg font-bold leading-normal",`q${q}`]} id={`nfchq${q}`}>
      <table class="size-full border-l border-solid border-gray-500">
        <tbody>
          <tr id={`nfchq${q}-numbers`}>{COLS.map( c=> <td id={`nfc-h-q${q}-${c}`} class="max-sm:text-sm">{sequences.nfc[`q${q}`][c]}</td>)}</tr>
        </tbody>
      </table>
    </div>
  })}
  
  <!-- AFC Headers -->
  <div id="champAFC" class="overflow-hidden text-lg font-bold leading-normal flex flex-col justify-center 
    bg-afc-primary bg-center bg-no-repeat bg-cover border border-solid border-gray-500" >
    <img class="w-full" src="img/afc-logo.svg">
  </div>
  {Qs.map( q => { 
    return <div class:list={["column font-bold header",`q${q}`]} id={`afchq${q}`}>
      <table class="size-full border-t border-solid border-gray-500">
        <tbody>
          {ROWS.map( (r,i)=><tr><td id={`afc-h-q${q}-${r}`} class="max-sm:text-sm" >{sequences.afc[`q${q}`][i]}</td></tr>)}
        </tbody>
      </table>
    </div>
  })}

  <!--Main Grid -->
  <div id="gridsquares">
    <table class="size-full max-sm:border-l-afc-primary max-sm:border-l-2 max-sm max-sm:border-t-2 max-sm:border-t-nfc-primary">
      <tbody>
        {ROWS.map(row=>{
          return <tr>
            {COLS.map( col =>{
              let state = SquareState.OPEN;
              let pick = picks?.find( doc => doc.pick === `${row}${col}`);
              if( pick ) {
                state = pick.paid ? SquareState.BOOKED : SquareState.RESERVED;
              }
              return <Square row={row} col={col} state={state} pick={pick} />
            })}
          </tr>
        })}
      </tbody>
    </table>
  </div>
</div>
<PurchaseModal price={price} />

